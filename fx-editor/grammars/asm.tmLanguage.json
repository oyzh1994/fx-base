{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Assembly",
	"scopeName": "source.asm",
	"fileTypes": ["asm", "s", "inc"],
	"uuid": "c3e4d5f6-7a8b-4c9d-8e0f-1a2b3c4d5e6f",
	"patterns": [
		{
			"name": "comment.line.semicolon.asm",
			"match": ";.*$"
		},
		{
			"name": "comment.line.hash.asm",
			"match": "#.*$"
		},
		{
			"name": "comment.block.asm",
			"begin": "/\\*",
			"end": "\\*/"
		},
		{
			"name": "keyword.directive.asm",
			"match": "\\.(section|data|text|bss|global|extern|equ|db|dw|dd|dq|dt|align|org|include|ifndef|ifdef|endif|define|undef|macro|endm)\\b"
		},
		{
			"name": "keyword.instruction.x86.asm",
			"match": "\\b(mov|add|sub|mul|div|inc|dec|and|or|xor|not|shl|shr|rol|ror|push|pop|call|ret|jmp|je|jne|jz|jnz|jg|jge|jl|jle|cmp|test|lea|nop|hlt|int|cli|sti|cld|std)\\b"
		},
		{
			"name": "keyword.instruction.arm.asm",
			"match": "\\b(ldr|str|add|sub|mul|div|and|orr|eor|bic|lsl|lsr|asr|ror|push|pop|bl|bx|b|beq|bne|bgt|bge|blt|ble|cmp|tst|mov|mvn|nop|swi)\\b"
		},
		{
			"name": "constant.numeric.hex.asm",
			"match": "\\b0x[0-9a-fA-F]+\\b"
		},
		{
			"name": "constant.numeric.decimal.asm",
			"match": "\\b\\d+\\b"
		},
		{
			"name": "constant.numeric.binary.asm",
			"match": "\\b0b[01]+\\b"
		},
		{
			"name": "constant.numeric.octal.asm",
			"match": "\\b0[0-7]+\\b"
		},
		{
			"name": "string.quoted.double.asm",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.asm",
					"match": "\\\\."
				}
			]
		},
		{
			"name": "string.quoted.single.asm",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.asm",
					"match": "\\\\."
				}
			]
		},
		{
			"name": "entity.name.label.asm",
			"match": "^\\s*[a-zA-Z_][a-zA-Z0-9_]*:\\s*"
		},
		{
			"name": "variable.register.x86.asm",
			"match": "\\b(al|ah|ax|eax|rax|bl|bh|bx|ebx|rbx|cl|ch|cx|ecx|rcx|dl|dh|dx|edx|rdx|si|esi|rsi|di|edi|rdi|bp|ebp|rbp|sp|esp|rsp)\\b"
		},
		{
			"name": "variable.register.arm.asm",
			"match": "\\b(r[0-9]|r1[0-5]|sp|lr|pc|cpsr|spsr)\\b"
		},
		{
			"name": "keyword.operator.asm",
			"match": "([+\\-*/&|^<>]=?|=|!=|%|\\[|\\])"
		}
	]
}
